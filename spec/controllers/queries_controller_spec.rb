require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe QueriesController do
  describe "Authenticated" do
    include Devise::TestHelpers

    before(:each) do
      @user = FactoryGirl.create(:user)
      sign_in @user
    end

    # This should return the minimal set of attributes required to create a valid
    # Query. As you add validations to Query, be sure to
    # update the return value of this method accordingly.
    def valid_attributes
      { "name" => "MyString", "value" => "SELECT * FROM contests" }
    end

    def create_query()
      FactoryGirl.create(:query, :user_id => @user.id)
    end

    describe "GET index" do
      it "assigns all queries as @queries" do
        query = create_query()
        get :index
        expect(response.code).to eq("200")
      end
    end

    describe "GET show" do
      it "assigns the requested query as @query" do
        query = create_query()
        get :show, {:id => query.to_param}
        expect(response.code).to eq("200")
      end
    end

    describe "GET new" do
      it "assigns a new query as @query" do
        get :new
        expect(response.code).to eq("200")
      end
    end

    describe "GET edit" do
      it "assigns the requested query as @query" do
        query = create_query()
        get :edit, {:id => query.to_param}
        expect(response.code).to eq("200")
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Query" do
          expect {
            post :create, {:query => valid_attributes}
          }.to change(Query, :count).by(1)
        end

        it "assigns a newly created query as @query" do
          post :create, {:query => valid_attributes}
          assigns(:query).should be_a(Query)
          assigns(:query).should be_persisted
        end

        it "redirects to the created query" do
          post :create, {:query => valid_attributes}
          response.should redirect_to(Query.last)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved query as @query" do
          # Trigger the behavior that occurs when invalid params are submitted
          Query.any_instance.stub(:save).and_return(false)
          post :create, {:query => { "name" => "invalid value" }}
          response.should redirect_to(new_query_path)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Query.any_instance.stub(:save).and_return(false)
          post :create, {:query => { "name" => "invalid value" }}
          response.should redirect_to(new_query_path)
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested query" do
          query = create_query()
          # Assuming there are no other queries in the database, this
          # specifies that the Query created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          Query.any_instance.should_receive(:update_attributes).with({ "name" => "MyString" })
          put :update, {:id => query.to_param, :query => { "name" => "MyString" }}
        end

        it "assigns the requested query as @query" do
          query = create_query()
          put :update, {:id => query.to_param, :query => valid_attributes}
          assigns(:query).should eq(query)
        end

        it "redirects to the query" do
          query = create_query()
          put :update, {:id => query.to_param, :query => valid_attributes}
          response.should redirect_to(queries_path)
        end
      end

      describe "with invalid params" do
        it "assigns the query as @query" do
          query = create_query()
          # Trigger the behavior that occurs when invalid params are submitted
          Query.any_instance.stub(:save).and_return(false)
          put :update, {:id => query.to_param, :query => { "name" => "invalid value" }}
          response.should redirect_to(edit_query_path)
        end

        it "re-renders the 'edit' template" do
          query = create_query()
          # Trigger the behavior that occurs when invalid params are submitted
          Query.any_instance.stub(:save).and_return(false)
          put :update, {:id => query.to_param, :query => { "name" => "invalid value" }}
          response.should redirect_to(edit_query_path)
        end
      end
    end

    describe "DELETE destroy" do
      before(:each) do
        sign_in @user
      end

      it "destroys the requested query" do
        query = create_query()
        expect {
          delete :destroy, {:id => query.to_param}
        }.to change(Query, :count).by(-1)
      end

      it "redirects to the queries list" do
        query = create_query()
        delete :destroy, {:id => query.to_param}
        response.should redirect_to(queries_url)
      end
    end
  end

  # describe "unauthenticated" do
  #   it "get index page" do
  #     get :index
  #     response.should redirect_to('users/sign_in')
  #   end
  # end
end
