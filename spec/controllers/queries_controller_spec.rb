require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe QueriesController do

  describe "Authenticated" do
    include Devise::TestHelpers

    before(:each) do
      @user = FactoryGirl.create(:user)
      sign_in @user
    end

    # This should return the minimal set of attributes required to create a valid
    # Query. As you add validations to Query, be sure to
    # update the return value of this method accordingly.
    def valid_attributes
      { "name" => "MyString", "value" => "SELECT * FROM contests" }
    end

    def create_query()
      connection = FactoryGirl.create(:connection)
      FactoryGirl.create(:query, :user_id => @user.id, :connection_id => connection.id)
    end

    describe "GET index" do
      it "assigns all queries as @queries" do
        query = create_query()
        get :index
        expect(response.code).to eq("200")
      end
    end

    describe "GET new" do
      it "assigns a new query as @query" do
        get :new
        response.should redirect_to(edit_query_path(Query.last))
      end
    end

    describe "GET edit" do
      it "assigns the requested query as @query" do
        query = create_query()
        get :edit, {:id => query.to_param}
        expect(response.code).to eq("200")
      end
    end

    describe "run" do
      it "post to action not using ajax" do
        query = create_query()
        expect {
          post :run, {
            :connection_id => 1,
            :value => 'SELECT * FROM queries'
          }
        }.to raise_error(ActionController::RoutingError)
      end

      it "ajax post to action" do
        DBClient.any_instance.stub(:query).and_return(true)

        query = create_query()
        xhr :post, :run, {
          :connection_id => 1,
          :value => 'SELECT * FROM queries'
        }

        expect(response.code).to eq("200")
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested query" do
          query = create_query()

          put :update, {
            :id => query.to_param,
            :query => {
              "name" => 'query name',
              "connection_id" => Connection.last.id
            },
            :format => :json
          }

          query.reload

          expect(query.name).to eq('query name')
          expect(query.db_connection.id).to eq(Connection.last.id)

          expect(response.code).to eq("200")
        end
      end

      describe "with invalid params" do
        it "assigns the query as @query" do
          query = create_query()
          # Trigger the behavior that occurs when invalid params are submitted
          put :update, {
            :id => query.to_param,
            :query => { "name" => nil },
            :format => :json
          }
          expect(response.code).to eq('422')
        end
      end
    end

    describe "DELETE destroy" do
      before(:each) do
        sign_in @user
      end

      it "destroys the requested query" do
        query = create_query()
        expect {
          delete :destroy, {:id => query.to_param}
        }.to change(Query, :count).by(-1)
      end

      it "redirects to the queries list" do
        query = create_query()
        delete :destroy, {:id => query.to_param}
        response.should redirect_to(queries_url)
      end
    end
  end

  describe "unauthenticated" do
    it "get index page" do
      get :index
      response.should redirect_to(new_user_session_path)
    end
  end
end
